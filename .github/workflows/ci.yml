name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort
    
    - name: Code formatting check (Black)
      run: |
        black --check --diff bungo_map tests
    
    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff bungo_map tests
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 bungo_map tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 bungo_map tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        pytest tests/ --cov=bungo_map --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Run integration tests
      run: |
        # データ収集から検索までの統合テスト
        python -m bungo_map.cli.main collect --demo
        python -m bungo_map.cli.search stats --db data/bungo_production.db
        python -m bungo_map.cli.search author "夏目" --db data/bungo_production.db
        python -m bungo_map.cli.main export --format geojson --preview
    
    - name: Performance test
      run: |
        # 性能要件テスト（0.5秒以内）
        timeout 30s python -c "
        import time
        from bungo_map.core.database import BungoDatabase
        
        db = BungoDatabase('data/bungo_production.db')
        
        # 検索性能テスト
        test_cases = [
            ('search_authors', '夏目'),
            ('search_works', '坊っちゃん'),
            ('search_places', '松山')
        ]
        
        all_passed = True
        for method_name, query in test_cases:
            start_time = time.time()
            method = getattr(db, method_name)
            result = method(query)
            execution_time = time.time() - start_time
            
            if execution_time >= 0.5:
                print(f'❌ {method_name} failed: {execution_time:.3f}s >= 0.5s')
                all_passed = False
            else:
                print(f'✅ {method_name} passed: {execution_time:.3f}s')
        
        if not all_passed:
            exit(1)
        print('🎉 All performance tests passed!')
        "

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r bungo_map -f json -o bandit-report.json || true
        bandit -r bungo_map
    
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check

  build-and-package:
    runs-on: ubuntu-latest
    needs: [test, integration-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
    
    - name: Build package
      run: |
        python -m build
    
    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/

  documentation:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install sphinx sphinx-rtd-theme
    
    - name: Generate documentation
      run: |
        # ドキュメント生成（将来の拡張用）
        echo "📚 Documentation generation placeholder"
        mkdir -p docs/build
        echo "# Bungo Map System Documentation" > docs/build/index.md
        echo "## Features" >> docs/build/index.md
        echo "- 3-tier database (authors → works → places)" >> docs/build/index.md
        echo "- Bidirectional search" >> docs/build/index.md
        echo "- GeoJSON export for MapKit" >> docs/build/index.md
    
    - name: Archive documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/build/ 